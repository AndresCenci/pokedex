{"version":3,"sources":["images/arrow.png","images/not-available.png","images/pokemon-logo.png","config/index.js","api/pokedexAPI.js","components/Card.js","components/LoadingSpinner.js","components/Pokedex.js","components/Switch.js","components/Header.js","serviceWorker.js","index.js"],"names":["module","exports","config","port","limit","urlPokeAPI","getPage","a","offset","url","concat","fetch","request","json","data","pokemons","Promise","all","results","map","result","getPokemonData","pokemonData","species","speciesData","forEach","element","index","Card","useState","showModal","setShowModal","className","onClick","repeat","Math","max","pokemon","id","toString","length","name","charAt","toUpperCase","slice","src","sprites","other","front_default","NoImage","alt","arrow","types","type","key","height","weight","genera","language","genus","abilities","ability","flavor_text_entries","flavor","idFlavor","version","split","flavor_text","stats","stat","base_stat","LoadingSpinner","Pokedex","pokemonList","setPokemonList","setOffset","loading","setLoading","useEffect","fetchData","Switch","data-on","data-off","Header","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.effb2a5a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.fc0256c2.png\";","module.exports = __webpack_public_path__ + \"static/media/not-available.f228fdd5.png\";","module.exports = __webpack_public_path__ + \"static/media/pokemon-logo.6bfedd95.png\";","const config = {\n    port: 3000,\n    limit: 5, \n    urlPokeAPI: 'https://pokeapi.co/api/v2/'\n}\n\nexport default config;\n","import config from '../config/index';\n\nconst getPage = async (offset = 0) => {\n    let url = config.urlPokeAPI.concat(`pokemon?limit=${config.limit}&offset=${offset}`);\n    const request = await fetch(url);\n    const data = await request.json();\n\n    const pokemons = async () => {\n        return Promise.all(data.results.map(result => getPokemonData(result.url)));\n    }\n    const pokemonData = await pokemons();\n\n    data.results = pokemonData;\n\n    const species = async () => {\n        return Promise.all(data.results.map(result => getPokemonData(result.species.url)));\n    }\n    const speciesData = await species();\n\n    data.results.forEach((element, index) => {\n       data.results[index].species = speciesData[index];\n    });\n\n    return data || {};\n}\n\nconst getPokemonData = async (url) => {\n    const request = await fetch(url);\n    const data = await request.json();\n    return data || {};\n}\n\nexport {\n    getPage,\n    getPokemonData\n}\n","import React, { useState } from 'react';\nimport './Card.css';\nimport NoImage from '../images/not-available.png';\nimport arrow from '../images/arrow.png';\n\nconst Card = (data) => {\n    const [showModal, setShowModal] = useState(false);\n\n    return (\n        <div className='card'>\n            <div className='card-data' onClick={() => setShowModal(true)}>\n                <div className='id'>{'0'.repeat(Math.max(4 - data.pokemon.id.toString().length, 0)) + data.pokemon.id}</div>\n                <div className='name'>{data.pokemon.name.charAt(0).toUpperCase().concat(data.pokemon.name.slice(1))}</div>\n                <div>\n                    <img src={data.pokemon.sprites.other['official-artwork'].front_default !== null\n                        ? data.pokemon.sprites.other['official-artwork'].front_default\n                        : NoImage } alt={data.pokemon.name} className='image' />\n                </div>\n            </div>\n\n            { showModal && \n                <div className='modal'>\n                    <img src={arrow} className='card-arrow-back' alt='back' onClick={() => setShowModal(false)} />\n\n                    <div className='modal-card-data'>\n                        <div className='modal-card-name'>{data.pokemon.name.charAt(0).toUpperCase().concat(data.pokemon.name.slice(1))}</div>\n                        <div className='modal-card-types'>\n                            {data.pokemon.types.map((type, key) => {\n                                return <span className='modal-card-type' key={key}>{type.type.name}</span>\n                            })}\n                        </div>\n\n                        <div>\n                            <img src={data.pokemon.sprites.other['official-artwork'].front_default !== null\n                                ? data.pokemon.sprites.other['official-artwork'].front_default\n                                : NoImage } alt={data.pokemon.name} className='modal-image' />\n                        </div>\n\n                        <table className='modal-table'>\n                            <thead>\n                                <tr className='modal-table-stats-name'>\n                                    <td>Height</td>\n                                    <td>Weight</td>\n                                    <td>Category</td>\n                                    <td>Abilities</td>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr className='modal-table-stats-base'>\n                                    <th>{data.pokemon.height}\"</th>\n                                    <th>{data.pokemon.weight}lbs</th>\n                                    <th>\n                                        {data.pokemon.species.genera.map(genera => {\n                                            if (genera.language.name === 'en') {\n                                                return genera.genus;\n                                            }\n                                            return '';\n                                        })}\n                                    </th>\n                                    <th>\n                                        {data.pokemon.abilities.map(ability => {\n                                            return ability.ability.name.concat('\\n')\n                                        })}\n                                    </th>\n                                </tr>\n                            </tbody>\n                        </table>\n\n                        <p className='modal-description'>\n                            {data.pokemon.species.flavor_text_entries.map(flavor => {\n                                const idFlavor = flavor.version.url.split('/');\n                                if (flavor.language.name === 'en' && idFlavor[idFlavor.length - 2] === data.pokemon.id.toString()) {\n                                    return flavor.flavor_text.concat('\\n');\n                                }\n                                return '';\n                            })}\n                        </p>\n\n                        <table className='modal-table'>\n                            <thead>\n                                <tr className='modal-table-stats-base'>\n                                    {data.pokemon.stats.map((stat, key) => {\n                                        return <th key={key}>{stat.base_stat}</th>\n                                    })}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr className='modal-table-stats-name'>\n                                    {data.pokemon.stats.map((stat, key) => {\n                                        return <td key={key}>{stat.stat.name}</td>\n                                    })}\n                                </tr>\n                            </tbody>\n                        </table>\n\n                    </div>\n                </div>\n            }                    \n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = () => {\n    return (\n        <div className='container'>\n            <div className='pokeball'></div>\n        </div>\n    )\n}\n\nexport default LoadingSpinner;","import React, { useState, useEffect } from 'react';\nimport { getPage } from '../api/pokedexAPI';\nimport './Pokedex.css';\nimport arrow from '../images/arrow.png';\nimport config from '../config/index';\nimport Card from './Card';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst Pokedex = () => {\n    const [pokemonList, setPokemonList] = useState([]);\n    const [offset, setOffset] = useState(0);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        async function fetchData() {\n            setLoading(true);\n            const data = await getPage(offset);\n            setPokemonList(data.results);\n            setLoading(false);\n        }\n        fetchData();\n    }, [offset]);\n\n    return loading \n        ? <LoadingSpinner />\n        :\n        <section className=\"main\">\n            <div className='pages'>\n                <img src={arrow} className='arrow-back' alt='back' onClick={() => offset - config.limit >= 0 ? setOffset(offset - config.limit) : setOffset(offset)} />\n                <img src={arrow} className='arrow-next' alt='next' onClick={() => setOffset(offset + config.limit)} />\n            </div>\n            <div className=\"cards\">\n                {pokemonList.map(pokemon => {\n                    return <Card key={pokemon.id} pokemon={pokemon}/>\n                })}\n            </div>\n        </section>\n}\n\nexport default Pokedex;\n","import React from 'react';\nimport './Switch.css';\n\nconst Switch = () => {\n    return (\n        <label className=\"switch\">\n            <input className=\"switch-input\" type=\"checkbox\" />\n            <span className=\"switch-label\" data-on=\"ES\" data-off=\"EN\"></span> \n            <span className=\"switch-handle\"></span> \n        </label>\n    )\n}\n\nexport default Switch;","import React from 'react';\nimport './Header.css';\nimport logo from '../images/pokemon-logo.png';\nimport Switch from './Switch';\n\nconst Header = () => {\n    return (\n        <section className='header'>\n            <div className='header-logo'>\n                <img src={logo} className='logo' alt='Pokémon logo'/>\n            </div>\n            <span className='header-switch'>\n                <Switch />\n            </span>\n        </section>\n    )\n}\n\nexport default Header;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Pokedex from './components/Pokedex';\nimport Header from './components/Header';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <Pokedex />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}